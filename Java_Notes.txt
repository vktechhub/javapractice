Escape Sequences in Java

A character with a backslash (\) just before it is an escape sequence or escape character. We use escape characters to perform some specific task.

    \t - Insert Tab
    \b - Insert Backspace
    \n - Insert New line
    \r - carriage return. ()
    \' - Insert Single quote
    \" - Insert Double quote
    \\ - Insert Backslash
    \f - form feed

Math functions:-
    The Math.pow() method in Java is used to calculate a number raised to the power of some other number.

        double base = 30;
        double exponent = 2;
        double out = Math.pow(base, exponent);
        int out = (int) Math.pow(base, exponent);


Java String format() Method 
    // Concatenate string using format()
        String res = String.format("Welcome to %s!", s);

    // Adding zeros to a number
        String formatted = String.format("%03d", num);
            0 - to pad with zeros
            3 - to set width to 3

Java Format Specifiers - https://www.geeksforgeeks.org/java/format-specifiers-in-java/
    // Format specifiers begin with a percent character (%) and terminate with a "type character, " which indicates the type of data (int, float, etc.) that will be converted
    // The general syntax of a format specifier is
            % [flags] [width] [.precision] [argsize] typechar

            Format Specifier	Conversion Applied
            %%	                Inserts a % sign
            %x %X	            Integer hexadecimal
            %t %T	            Time and Date
            %s %S	            String
            %n	                Inserts a newline character
            %o	                Octal integer
            %f	                Decimal floating-point
            %e %E	            Scientific notation
            %g	                Causes Formatter to use either %f or %e, whichever is shorter
            %h %H	            Hash code of the argument
            %d	                Decimal integer
            %c	                Character
            %b %B	            Boolean
            %a %A	            Floating-point hexadecimal

    // Space format specifier : When creating columns of numbers, it is sometimes very useful to print a space before a positive number so that positive and negative number get aligned. 
            Formatter().format("% d", -111);
            Formatter().format("% d", 111);

                Output:
                    -111
                     111

    // + Sign Specifier: This adds the + sign before positive numeric value, and has no effect on negative numeric value. Syntax:
            Formatter().format("%+d", 111);

                Output:
                +111

    // ( specifier: This specifier puts the negative numeric values inside the parentheses, and has no effect on the positive numeric values. Syntax:
                Formatter().format("%(d", -111);
                Formatter().format("%(d", 111);

                Output:
                (111)
                111


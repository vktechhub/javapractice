import java.util.*;
public class CJ_Collection_3_Specific_Methods {
    public static void main(String[] args) {
       //List Methods - Overview (In addition to Collection methods)
        // get() - Returns the element at a specified index
        // set() - Updates the element at a specified index
        // add(index, element) - Adds an element at a specified index
        // remove(index) - Removes the element at a specified index
        // indexOf() - Returns the index of the first occurrence of a specified element
        // lastIndexOf() - Returns the index of the last occurrence of a specified element
        // listIterator() - Returns a list iterator to traverse the elements of the list
        // subList() - Returns a view of a portion of the list between specified indices

        System.out.println("--------------------------------------------------");
        // List Methods - Other than Collection methods
        System.out.println("List - Other than Collection methods:");
        System.out.println("--------------------------------------------------");
        List<String> fruitsList = new ArrayList<>();
        fruitsList.addAll("Apple", "Banana", "Orange", "Mango", "Grapes", "Pineapple", "Strawberry", "Blueberry", "Raspberry", "Blackberry");
        System.out.println("fruitsList: " + fruitsList);

        //ArrayList Methods - Overview(In addition to Collection and List)
        // ensureCapacity() - Increases the capacity of the ArrayList to a specified minimum capacity
        // trimToSize() - Trims the capacity of the ArrayList to the current size

        //LinkList Methods - Overview (In addition to Collection and List)
        // addFirst() - Adds an element at the beginning of the LinkedList
        // addLast() - Adds an element at the end of the LinkedList
        // getFirst() - Returns the first element of the LinkedList
        // getLast() - Returns the last element of the LinkedList
        // removeFirst() - Removes the first element of the LinkedList
        // removeLast() - Removes the last element of the LinkedList
        // offer() - Adds an element to the end of the LinkedList (as a queue)
        // poll() - Removes and returns the first element of the LinkedList (as a queue)
        // push() - Adds an element at the top of the LinkedList (as a stack)
        // pop() - Removes and returns the top element of the LinkedList (as a stack

        //Set Methods - Overview (In addition to Collection methods)
        // first() - Returns the first (lowest) element currently in the set
        // last() - Returns the last (highest) element currently in the set
        // headSet() - Returns a view of the portion of the set whose elements are strictly less than a specified element
        // tailSet() - Returns a view of the portion of the set whose elements are greater than or equal to a specified element
        // subSet() - Returns a view of the portion of the set whose elements range from a specified fromElement to a specified toElement
        // lower() - Returns the greatest element in the set strictly less than a specified element
        // floor() - Returns the greatest element in the set less than or equal to a specified element
        // higher() - Returns the least element in the set strictly greater than a specified element
        // ceiling() - Returns the least element in the set greater than or equal to a specified element
        // pollFirst() - Retrieves and removes the first (lowest) element, or returns null if the set is empty
        // pollLast() - Retrieves and removes the last (highest) element, or returns null if the set is empty
        // NavigableSet - An interface that extends SortedSet and provides navigation methods
        // SortedSet - An interface that extends Set and provides methods for maintaining a sorted order of elements
        // 
        Set<String> fruits = new HashSet<>();
       
        // HashSet Methods - Overview (not in Collection and Set methods)
        // hashCode() - Returns the hash code value for the set
        // equals() - Compares the specified object with the set for equality
        //
        Set<String> fruitsSet = new HashSet<>();

        //TreeSet Methods - Overview (not in Collection and Set Methods)
        // comparator() - Returns the comparator used to order the elements in the set, or null if the set uses the natural ordering of its elements
        // descendingSet() - Returns a reverse order view of the elements in the set
        // navigableIterator() - Returns an iterator over the elements in the set in descending order

        //Queue Methods - Overview (In addition to Collection methods)
        // offer() - Adds an element to the end of the queue
        // poll() - Removes and returns the head of the queue
        // peek() - Returns the head of the queue without removing it
        Queue<String> fruitsQueue = new LinkedList<>();

        //Deque Methods - Overview (In addition to Collection and Queue methods)
        // addFirst() - Adds an element at the front of the deque
        // addLast() - Adds an element at the end of the deque
        // removeFirst() - Removes and returns the first element of the deque
        // removeLast() - Removes and returns the last element of the deque
        // peekFirst() - Returns the first element of the deque without removing it
        // peekLast() - Returns the last element of the deque without removing it
        Deque<String> fruitsDeque = new LinkedList<>();

        //ArrayDeque Methods - Overview (In addition to Collection and Deque methods)
        // offerFirst() - Adds an element at the front of the deque
        // offerLast() - Adds an element at the end of the deque
        // pollFirst() - Removes and returns the first element of the deque
        // pollLast() - Removes and returns the last element of the deque
        // peekFirst() - Returns the first element of the deque without removing it
        // peekLast() - Returns the last element of the deque without removing it
        ArrayDeque<String> fruitsArrayDeque = new ArrayDeque<>();
    }
}
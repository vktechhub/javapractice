üß© 1. Primitive Data Types
Type	Size	Range	                    Example
byte	8-bit	-128 to 127	                byte b = 10;
short	16-bit	-32,768 to 32,767	        short s = 1000;
int	    32-bit	~ -2 billion to +2 billion	int count = 25;
long	64-bit	Huge range	                long phone = 9876543210L;
float	32-bit	Decimal (approx.)	        float price = 10.5f;
double	64-bit	More precise decimal	    double pi = 3.14159;
char	16-bit Unicode char	'A', '9', etc.	char grade = 'A';
boolean	1-bit (true/false)	Logical values	boolean isReady = true;

üì¶ 2. Reference Data Types
Reference types store the address (reference) of an object, not the actual value.
They are created using classes, interfaces, arrays, Collections or enums.

üß± 2.1. Class Type
Created from a class definition. Holds objects created from user-defined or built-in classes.

First Example:-
Student s1 = new Student();           // Custom class

Second Example:-
String name = "Vignesh";              // String is a class (special case, no need for new)

üî¢ 2.2. Wrapper Classes (for Primitives)

Wrapper classes are object representations of primitive data types.
Why Do We Need Wrapper Classes?
    * Many Java frameworks and APIs (like Collections, Streams, Generics, Reflection, JDBC, etc.) require objects, not primitives.
            (e.g., List<Integer> instead of List<int>).
    * Primitives don‚Äôt have methods. Wrappers provide useful methods for working with values.
            int num = 10;
            String binary = Integer.toBinaryString(num);  // convert to binary string
            System.out.println(Integer.MAX_VALUE);  // 2147483647
    * Autoboxing and Unboxing:- Java automatically converts between primitives and wrappers when needed.
            int x = 5;
            Integer y = x;     // autoboxing (primitive ‚Üí object)
            int z = y;         // unboxing (object ‚Üí primitive)
    * Primitives cannot be null, but wrappers can.
            int a = 0;          // must have a value
            Integer b = null;   // can represent ‚Äúno value‚Äù

Primitive	Wrapper Class	Example
byte	    Byte	        Byte b = 10;
short	    Short	        Short s = 25;
int	        Integer	        Integer num = 50;
long	    Long	        Long phone = 9876543210L;
float	    Float	        Float rate = 45.6f;
double	    Double	        Double price = 99.99;
char	    Character	    Character grade = 'A';
boolean	    Boolean	        Boolean flag = true;

üßÆ 2.3. Arrays
A group of elements of the same data type of fixed array size.
Reference points to the memory block where array elements are stored.
    int[] marks = {85, 90, 95};
    String[] names = new String[5];

üß∞ 2.4. Collections Framework
Java provides powerful collection classes for storing groups of objects.
Used for dynamic, flexible data structures (unlike fixed-size arrays).

Category	Interface	Common Implementations	
List	    List<E>	    ArrayList, LinkedList	
Set	        Set<E>	    HashSet, LinkedHashSet, TreeSet	
Map	        Map<K, V>	HashMap, LinkedHashMap, TreeMap	
Queue	    Queue<E>	LinkedList, PriorityQueue, ArrayDeque, ConcurrentHashMap

üß© 2.5. Interface Types
Reference variable can also refer to an object of a class that implements an interface.
Allows polymorphism (object behaves as per the interface it implements).

Runnable task = new Thread();
List<Integer> list = new ArrayList<>();

üéöÔ∏è 2.6. Enum Types
Used for fixed sets of constants. 
Type-safe alternative to using constant integers or strings.

enum Day { MONDAY, TUESDAY, WEDNESDAY }
Day today = Day.MONDAY;

2.7. Annotations
Annotations are a special type of reference data type that provide metadata ‚Äî information about code, not part of the code logic itself.
They tell the compiler, tools, or runtime environment how to handle certain pieces of code (classes, methods, fields, etc.).

2.8. Record
A record is a special type of class introduced in Java 14 (preview) and made official in Java 16.
Example:- 
record Person(String name, int age) { }

For record Person(String name, int age) Java automatically creates:
// 1. Private final fields
// 2. Canonical constructor
// 3. Accessor methods (getters, but without 'get' prefix)
// 4. equals(), hashCode(), and toString() methods
// all auto-generated based on fields

‚ö° 3. Special Reference Value: null
All reference types can hold a null value (means: ‚Äúno object‚Äù assigned).
String name = null; // reference doesn't point anywhere


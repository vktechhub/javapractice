Object base class functions
All classes in Java implicitly inherit from the Object class, which is the root of the class hierarchy. The Object class provides several important methods that can be overridden by subclasses to customize their behavior. Here are some of the most commonly used methods from the Object class:
1. toString(): This method returns a string representation of the object. By default, it returns the class name followed by the object's hash code. It is often overridden to provide a more meaningful string representation of the object.
2. equals(Object obj): This method checks if two objects are equal. By default, it compares the memory addresses of the objects. It is often overridden to compare the actual content of the objects.
3. hashCode(): This method returns a hash code value for the object. It is used in hashing-based collections like HashMap and HashSet. When overriding equals(), it is important to also override hashCode() to maintain the general contract for the hashCode method.
4. clone(): This method creates and returns a copy of the object. It is a protected method, so it must be overridden and made public in the subclass to be accessible.
5. finalize(): This method is called by the garbage collector before an object is destroyed. It can be overridden to perform cleanup operations, but its use is generally discouraged in favor of other resource management techniques.
6. getClass(): This method returns the runtime class of the object. It is useful for reflection and type checking.
7. notify(), notifyAll(), wait(): These methods are used for thread synchronization. They are part of the Object class because every object in Java can be used as a monitor for synchronization.
These methods provide a foundation for object behavior in Java, and understanding how to use and override them is essential for effective Java programming.
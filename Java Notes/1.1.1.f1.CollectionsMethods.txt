Note: 
CName - Collection instance Name
LName - List instance Name
E or EName - Element Name / value to be processed


Functions supported based on Collection type

üõ† Common methods for all collections(List, Set and Queue):-
    ‚óè	CName.add(E)    - Adds an element(E) to the collection
    ‚óè	Collections.addAll(CName, E1, E2, E3,...) - Adds multiple elements into a collection
    ‚óè	Collections.addAll(CName, anotherCName) - Adds all elements from another collection into a collection
    ‚óè	CName.clone() - Creates a shallow copy of the collection
    ‚óè	CollectionType CName-new = new CollectionType<>(CName 1, CName 2, CName 3, ...) - Creates a new collection by combining multiple collections
    ‚óè	CName.contains(E) - Returns true if the collection contains a specified element
    ‚óè	CName.remove(E) - Removes a specified element from the collection
    ‚óè	CName.removeif(condition) - Removes all elements that match a given condition (Java 8 and above)
        ‚óã	CName.removeIf(EName -> EName.startsWith(‚Äúx‚Äù)) - Removes all elements that starts with
        ‚óã	CName.removeIf(EName -> EName.endsWith(‚Äúx‚Äù)) - Removes all elements that ends with
        ‚óã	CName.removeIf(EName -> EName.contains(‚Äúx‚Äù)) - Removes all elements that contains
        ‚óã	CName.removeIf(EName -> EName.length() < n) - Removes all elements that has length less than n
        ‚óã	CName.removeIf(EName -> (EName < n)) - Removes all elements that is less than
        ‚óã	CName.removeIf(EName -> (EName > n)) - Removes all elements that is greater than
    ‚óè	CName.size() - Returns the number of elements in the collection
    ‚óè	CName.isEmpty() - Returns true if the collection is empty
    ‚óè	CName.clear() - Removes all the elements from the collection
    ‚óè	CName.iterator() - Returns an iterator to traverse the elements of the collection
        ‚óã	IteratorName.hasNext()
        ‚óã	IteratorName.next()
    ‚óè	CName.toArray() - Converts the collection to an array
    ‚óè	CName.toString() - Converts the collection to a String
    ‚óè	CName.forEach(EName -> statement) - Performs the given action for each element of the collection
            // Operations with another Collection
    ‚óè	CName.addAll(anotherCName) - Adds all elements from the specified collection to this collection
    ‚óè	CName.containsAll(anotherCName) - Returns true if the collection contains all the elements of a specified collection
    ‚óè	CName.retainAll(anotherCName) - Retains only the elements in the collection that are contained in a specified collection
    ‚óè	CName.removeAll(anotherCName) - Removes all the elements of a specified collection from the collection
    ‚óè	CName.equals(anotherCName) - Compares the collection with another collection for equality
    ‚óè	CName.stream() - Returns a sequential stream with the collection as its source (Java 8 and above)
    ‚óè	CName.parallelStream() - Returns a parallel stream with the collection as its source (Java 8 and above)
    ‚óè	CName.spliterator() - Returns a spliterator over the elements in the collection (Java 8 and above)
    ‚óè	CName.hashCode() - Returns the hash code value for the collection


üõ† Common List methods - not in Collection(also available for ArrayList and LinkedList)
    ‚óè	LName.get(index) - Returns the element at a specified index
    ‚óè	LName.set(index, E) - Updates the element at a specified index
    ‚óè	LName.add(index, E) - Adds an element at a specified index
    ‚óè	LName.remove(index) - Removes the element at a specified index
    ‚óè	LName.indexOf() - Returns the index of the first occurrence of a specified element
    ‚óè	LName.lastIndexOf() - Returns the index of the last occurrence of a specified element
    ‚óè	LName.listIterator() - Returns a list iterator to traverse the elements of the list
        ‚óã	IteratorName.hasNext() - Checks if there is a next element;
        ‚óã	IteratorName.next() - Returns the next element;
        ‚óã	IteratorName.hasPrevious() - Checks if there is a previous element;
        ‚óã	IteratorName.previous() - Returns the previous element;
        ‚óã	IteratorName.remove() - Removes the last element returned by the iterator;
        ‚óã	IteratorName.set(E) - Replaces the last element returned by the iterator;
        ‚óã	IteratorName.add(E) - Inserts the specified element into the list;
    ‚óè	LName.subList() - Returns a view of a portion of the list between specified indices
    ‚óè	CList.equals(anotherList) - Compares the list with another list for equality  
    ‚óè	Collections.sort(LName) - Sorts the elements of the list in natural order or using a specified comparator
    ‚óè	Collections.reverse(LName) - Reverses the order of the elements in the list
    ‚óè	Collections.shuffle(LName) - Randomly shuffles the elements in the list
    ‚óè	Collections.rotate(LName) - Rotates the elements in the list
    ‚óè	Collections.swap(LName) - Swaps the elements at the specified positions in the list
    ‚óè	Collections.min(LName) - Returns the minimum element in the list
    ‚óè	Collections.max(LName) - Returns the maximum element in the list
    ‚óè	Collections.synchronizedList(LName) - Returns a synchronized (thread-safe) list backed by the specified list
    ‚óè	Collections.fill(LName) - Fills the specified list with the specified element

# ArrayList only methods:-
    ‚óè	ArrayList.ensureCapacity(n) - Increases the capacity of the ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument n
    ‚óè	ArrayList.trimToSize() - Trims the capacity of the ArrayList instance to be the list's current size

# Queue only methods:-
    ‚óè	QueueName.offer(E) - Inserts the specified element into the queue
    ‚óè	QueueName.peek() - Retrieves, but does not remove, the head of the queue, or returns null if the queue is empty
    ‚óè	QueueName.element() - Retrieves, but does not remove, the head of the queue. Throws an exception if the queue is empty
    ‚óè	QueueName.poll() - Retrieves and removes the head of the queue, or returns null if the queue is empty
    ‚óè	QueueName.remove() - Retrieves and removes the head of the queue. Throws an exception if the queue is empty

# Deque only methods:-
    ‚óè	DequeName.addFirst(E) - Inserts the specified element at the front of the deque
    ‚óè	DequeName.addLast(E) - Inserts the specified element at the end of the deque
    ‚óè	DequeName.offerFirst(E) - Inserts the specified element at the front of the deque, or returns false if it cannot be added
    ‚óè	DequeName.offerLast(E) - Inserts the specified element at the end of the deque, or returns false if it cannot be added
    ‚óè	DequeName.getFirst() - Retrieves, but does not remove, the first element of the deque. Throws an exception if the deque is empty
    ‚óè	DequeName.getLast() - Retrieves, but does not remove, the last element of the deque. Throws an exception if the deque is empty
    ‚óè	DequeName.peekFirst() - Retrieves, but does not remove, the first element of the deque, or returns null if the deque is empty
    ‚óè	DequeName.peekLast() - Retrieves, but does not remove, the last element of the deque, or returns null if the deque is empty
    ‚óè	DequeName.removeFirst() - Removes and returns the first element of the deque. Throws an exception if the deque is empty
    ‚óè	DequeName.removeLast() - Removes and returns the last element of the deque. Throws an exception if the deque is empty
    ‚óè	DequeName.pollFirst() - Removes and returns the first element of the deque, or returns null if the deque is empty
    ‚óè	DequeName.pollLast() - Removes and returns the last element of the deque, or returns null if the deque is empty
    ‚óè	DequeName.descendingIterator() - Returns an iterator that iterates over the elements in the deque in reverse order

    # Stack methods supported via Deque interface:-
        ‚óè	DequeName.push(E) - Pushes an element onto the stack represented by this deque (equivalent to addFirst)
        ‚óè	DequeName.pop() - Pops an element from the stack represented by this deque (equivalent to removeFirst). Throws an exception if the deque is empty

# ArrayDeque and LinkedList methods -
    supports Queue, Deque and stack methods

# HashSet and LinkedHashSet methods:-
    * SuppressWarnings("unchecked") - to avoid unchecked warnings during clone operation
    
# TreeSet methods:-
    * SuppressWarnings("unchecked") - to avoid unchecked warnings during clone operation
    ‚óè	TreeSet.first() - Returns the first (lowest) element in the set
    ‚óè	TreeSet.last() - Returns the last (highest) element in the set
    ‚óè	TreeSet.headSet(E toElement) - Returns a view of the portion of the set whose elements are strictly less than toElement
    ‚óè	TreeSet.tailSet(E fromElement) - Returns a view of the portion of the set whose elements are greater than or equal to fromElement
    ‚óè	TreeSet.subSet(E fromElement, E toElement) - Returns a view of the portion of the set whose elements range from fromElement, inclusive, to toElement, exclusive
    ‚óè	TreeSet.pollFirst() - Retrieves and removes the first (lowest) element, or returns null if the set is empty
    ‚óè	TreeSet.pollLast() - Retrieves and removes the last (highest) element, or returns null if the set is empty
    * TreeSet.lower(E e) - Returns the next element in the set less than the given element, or null if there is no such element
    * TreeSet.floor(E e) - Returns the next element in the set less than or equal to the given element, or null if there is no such element
    * TreeSet.ceiling(E e) - Returns the next element in the set greater than or equal to the given element, or null if there is no such element
    * TreeSet.higher(E e) - Returns the next element in the set strictly greater than the given element, or null if there is no such element
    ‚óè	TreeSet.comparator() - Returns the comparator used to order the elements in the set, or null if the set uses the natural ordering of its elements

# Map common methods:-
    ‚óè	MapName.put(key, value) - Associates the specified value with the specified key in the map
    ‚óè	MapName.putIfAbsent(key, value) - Associates the specified value with the specified key if it is not already associated with a value
    ‚óè	MapName.putAll(anotherMap) - Copies all of the mappings from the specified map to this map
    ‚óè	MapName.get(key) - Returns the value to which the specified key is mapped, or null if the map contains no mapping for the key
    ‚óè	MapName.containsKey(key) - Returns true if this map contains a mapping for the specified key
    ‚óè	MapName.containsValue(value) - Returns true if this map maps one or more keys to the specified value
    ‚óè	MapName.size() - Returns the number of key-value mappings in this map
    ‚óè	MapName.isEmpty() - Returns true if this map contains no key-value mappings
    ‚óè	MapName.keySet() - Returns a Set view of the keys contained in this map
    ‚óè	MapName.values() - Returns a Collection view of the values contained in this map
    ‚óè	MapName.entrySet() - Returns a Set view of the mappings contained in this map
    ‚óè	MapName.forEach((key, value) -> statement) - Performs the given action for each entry in this map until all entries have been processed or the action throws an exception (Java 8 and above)
    ‚óè	MapName.getOrDefault(key, defaultValue) - Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key (Java 8 and above)
    ‚óè	MapName.remove(key) - Removes the mapping for a key from this map if it is present
    ‚óè	MapName.remove(key, value) - Removes the entry for the specified key only if it is currently mapped to the specified value
    ‚óè	MapName.replace(key, oldValue, newValue) - Replaces the entry for the specified key only if currently mapped to the specified value
    ‚óè	MapName.replace(key, value) - Replaces the entry for the specified key only if it is currently mapped to some value
    ‚óè	MapName.clear() - Removes all of the mappings from this map
    ‚óè	MapName.replaceAll((key, oldValue) -> newValue) - Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception (Java 8 and above)
    ‚óè	MapName.compute(key, (k, v) -> newValue) - Attempts to compute a mapping for the specified key
    ‚óè	MapName.equals(anotherMap) - Returns true if this map is equal to another map
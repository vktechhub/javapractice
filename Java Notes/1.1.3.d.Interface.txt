An Interface in Java is an abstract type that defines a set of methods a class must implement.
An interface acts as a contract that specifies what a class should do, but not how it should do it. 
It is used to achieve abstraction and multiple inheritance in Java. 
We define interfaces for capabilities (e.g. Comparable, Serializable, Drawable).

Notes:-
    * If we  extend a class, we can only extend one class. But we can implement multiple interfaces to a Class.(multiple inheritance)
    * Interface cannot be instantiated; We can create a Class that implements an interface, which can be instantiated.
        * Interfaces can extend other interfaces
        * To implement an interface, use the implements keyword.
        * A class that implements an interface must implement all the methods of the interface. 
        * All members of an interface are public, static, and final by default.
        * All methods of an interface are public and abstract by default.
        * Private methods can only be called inside default or static methods. cannot be accessed from outside the interface.
    * Weaker access privileges are not allowed for interface to Class methods.
        * Eg. default interface method is of public access; extended Class method must be public.
        

History:-
    * Prior to Java 8, interfaces could only have abstract methods (no bodies). 
    * After Java 8, they can also include default and static methods (with implementation), 
        * default method mentioned here is not access privilege; it is common instructions 
    * After Java 9, private methods are allowed.

When to Use Class and Interface?
    Use a Class when:
        * Use a class when you need to represent a real-world entity with attributes (fields) and behaviors (methods).
        * Use a class when you need to create objects that hold state and perform actions.
        * Classes are used for defining templates for objects with specific functionality and properties.
    Use an Interface when:
        * Use an interface when you need to define a contract for behavior that multiple classes can implement.
        * Interface is ideal for achieving abstraction and multiple inheritance.

Before Java8
interface InterfaceName {
    // abstract methods // no method body
    // variables
}

After Java8
interface InterfaceName {
    // abstract methods
    // variables
    default void defaultMethod() {  // default method - this is not access privilege; it is common instructions with public access privilege
        // default implementation
    }

    static void staticMethod() {    
        // static implementation
    }
}

Functional Interface
    A functional interface is an interface that contains exactly one abstract method. 
    These interfaces are used as the basis for lambda expressions and method references in Java.

